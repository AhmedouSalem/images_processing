# -*- coding: utf-8 -*-  # Encoding declaration
# Form implementation generated from reading ui file 'projet.ui'  # Origin of the UI code
#
# Created by: PyQt5 UI code generator 5.15.10  # Generated by PyQt5 UI code generator version 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is  # Warning not to manually edit
# run again.  Do not edit this file unless you know what you are doing.  # Unless you're familiar, avoid manual edits


from PyQt5 import QtCore, QtGui, QtWidgets  # Importing necessary PyQt5 modules


class Ui_MainWindow(object):  # Class definition for the UI
    def setupUi(self, MainWindow):  # Method to set up the UI
        MainWindow.setObjectName("MainWindow")  # Setting window object name
        MainWindow.resize(925, 542)  # Resizing the window
        self.centralwidget = QtWidgets.QWidget(MainWindow)  # Creating central widget
        self.centralwidget.setObjectName("centralwidget")  # Setting object name for central widget
        self.label = QtWidgets.QLabel(self.centralwidget)  # Creating label widget
        self.label.setGeometry(QtCore.QRect(10, 92, 421, 361))  # Setting geometry for the label
        self.label.setStyleSheet("background-color: white;")  # Setting style sheet for the label
        self.label.setText("")  # Setting text for the label
        self.label.setObjectName("label")  # Setting object name for the label
        self.tableWidget_Image = QtWidgets.QTableWidget(self.centralwidget)  # Creating table widget
        self.tableWidget_Image.setGeometry(QtCore.QRect(450, 90, 461, 361))  # Setting geometry for the table widget
        font = QtGui.QFont()  # Creating font object
        font.setPointSize(15)  # Setting point size for the font
        font.setBold(True)  # Setting bold style for the font
        font.setWeight(75)  # Setting weight for the font
        self.tableWidget_Image.setFont(font)  # Setting font for the table widget
        self.tableWidget_Image.setStyleSheet("background-color: white;")  # Setting style sheet for the table widget
        self.tableWidget_Image.setObjectName("tableWidget_Image")  # Setting object name for the table widget
        self.tableWidget_Image.setColumnCount(2)  # Setting column count for the table widget
        item = QtWidgets.QTableWidgetItem()  # Creating table widget item
        font = QtGui.QFont()  # Creating font object
        font.setPointSize(15)  # Setting point size for the font
        font.setBold(True)  # Setting bold style for the font
        font.setWeight(75)  # Setting weight for the font
        item.setFont(font)  # Setting font for the table widget item
        self.tableWidget_Image.setHorizontalHeaderItem(0, item)  # Setting horizontal header item for the table widget
        item = QtWidgets.QTableWidgetItem()  # Creating table widget item
        font = QtGui.QFont()  # Creating font object
        font.setPointSize(15)  # Setting point size for the font
        font.setBold(True)  # Setting bold style for the font
        font.setWeight(75)  # Setting weight for the font
        item.setFont(font)  # Setting font for the table widget item
        self.tableWidget_Image.setHorizontalHeaderItem(1, item)  # Setting horizontal header item for the table widget
        self.tableWidget_Image.horizontalHeader().setDefaultSectionSize(300)  # Setting default section size
        self.Browse_Image = QtWidgets.QPushButton(self.centralwidget)  # Creating push button widget
        self.Browse_Image.setGeometry(QtCore.QRect(34, 40, 361, 41))  # Setting geometry for the push button widget
        self.Browse_Image.setStyleSheet("background-color: blue;\n"  # Setting style sheet for the push button
                                         "color: white;\n"
                                         "font-weight: bold;\n"
                                         "border-radius: 10px;\n"
                                         "font-size: 18px;")  # Setting font size for the push button
        self.Browse_Image.setObjectName("Browse_Image")  # Setting object name for the push button
        self.Display_Image_From_Database = QtWidgets.QPushButton(self.centralwidget)  # Creating push button widget
        self.Display_Image_From_Database.setGeometry(QtCore.QRect(470, 40, 391, 41))  # Setting geometry
        self.Display_Image_From_Database.setStyleSheet("background-color: blue;\n"  # Setting style sheet
                                                        "color: white;\n"
                                                        "font-weight: bold;\n"
                                                        "border-radius: 10px;\n"
                                                        "font-size: 18px;")  # Setting font size
        self.Display_Image_From_Database.setObjectName("Display_Image_From_Database")  # Setting object name
        MainWindow.setCentralWidget(self.centralwidget)  # Setting central widget for the main window
        self.statusbar = QtWidgets.QStatusBar(MainWindow)  # Creating status bar
        self.statusbar.setObjectName("statusbar")  # Setting object name for the status bar
        MainWindow.setStatusBar(self.statusbar)  # Setting status bar for the main window

        self.retranslateUi(MainWindow)  # Calling retranslateUi method
        QtCore.QMetaObject.connectSlotsByName(MainWindow)  # Connecting slots by name

    def retranslateUi(self, MainWindow):  # Method to retranslate UI components
        _translate = QtCore.QCoreApplication.translate  # Translate method
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))  # Setting window title
        item = self.tableWidget_Image.horizontalHeaderItem(0)  # Getting horizontal header item
        item.setText(_translate("MainWindow", "Image Name"))  # Setting text for horizontal header item
        item = self.tableWidget_Image.horizontalHeaderItem(1)  # Getting horizontal header item
        item.setText(_translate("MainWindow", "Image"))  # Setting text for horizontal header item
        self.Browse_Image.setText(_translate("MainWindow", "Browse image"))  # Setting text for push button
        self.Display_Image_From_Database.setText(_translate("MainWindow", "Display from database"))  # Setting text
        ###############################################################################################################


from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox
from projet_ui import Ui_MainWindow
from PyQt5.QtGui import QPixmap, QIcon
from PyQt5.QtWidgets import QTableWidgetItem, QLabel
from PyQt5 import QtCore

import mysql.connector

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.Display_Image_From_Database.clicked.connect(self.display_images_from_database)
        # Connecter le signal cellClicked à la méthode display_selected_image
        self.ui.tableWidget_Image.cellClicked.connect(self.display_selected_image)

    def display_selected_image(self, row, column):
        # Récupérer l'objet QLabel à partir de la cellule sélectionnée
        cell_widget = self.ui.tableWidget_Image.cellWidget(row, column)
        if isinstance(cell_widget, QLabel):
            # Récupérer la pixmap de l'objet QLabel
            pixmap = cell_widget.pixmap()
            # Afficher la pixmap dans le widget QLabel label
            self.ui.label.setPixmap(pixmap)

    def display_images_from_database(self):
        print("Bonjour click")
        try:
            # Connexion à la base de données
            mydb = mysql.connector.connect(
                host="localhost",
                user="root",
                password="Min36tity!",
                database="images_traitement"
            )

            # Récupération des données depuis la base de données
            cursor = mydb.cursor()
            cursor.execute("SELECT nom, image FROM Images_to_manipulate")
            rows = cursor.fetchall()

            # Affichage des données dans le tableWidget_Image
            row_position = 0
            for row in rows:
                nom, image_blob = row
                item_nom = QTableWidgetItem(nom)

                # Créer un widget QLabel pour afficher l'image
                label = QLabel()
                pixmap = QPixmap()
                pixmap.loadFromData(image_blob)
                label.setPixmap(pixmap.scaled(150, 150))  # Ajustez la taille de l'image si nécessaire
                label.setAlignment(QtCore.Qt.AlignCenter)
                self.ui.tableWidget_Image.setRowCount(row_position+1)

                # Ajouter le widget QLabel à la cellule du tableau
                self.ui.tableWidget_Image.setCellWidget(row_position, 1, label)

                # Ajouter le nom de l'image à la première colonne du tableau
                self.ui.tableWidget_Image.setItem(row_position, 0, item_nom)

                row_position += 1

            # Fermeture de la connexion à la base de données
            mydb.close()
        except Exception as e:
            # Affichage d'une boîte de message d'erreur
            error_message = QMessageBox()
            error_message.setIcon(QMessageBox.Critical)
            error_message.setText("Une erreur s'est produite lors de l'affichage des images depuis la base de données.")
            error_message.setInformativeText(f"Erreur : {str(e)}")
            error_message.setWindowTitle("Erreur")
            error_message.exec_()

if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.ui.tableWidget_Image.setColumnWidth(0, 150)
    window.ui.tableWidget_Image.setColumnWidth(1, 300)
    window.show()
    app.exec_()









# Améliorer l'apparence du tableau
        # self.ui.tableWidget_Image.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # self.ui.tableWidget_Image.verticalHeader().setSectionResizeMode(QHeaderView.ResizeToContents)
        # self.ui.tableWidget_Image.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # self.ui.tableWidget_Image.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)